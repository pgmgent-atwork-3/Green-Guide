# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Sector {
  id: Int!
  name: String!
  categories: [Category!]!
}

type Category {
  id: Int!
  name: String!
  sectorId: Int!
  sector: Sector!
}

type ContactPerson {
  id: Int!
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
  company: Company!
}

type CompanyType {
  id: Int!
  name: String!
}

type Reward {
  id: Int!
  name: String!
  description: String!
  points: Float!
  company: Company!
}

type Point {
  id: Int!
  amount: Int!
  user: User!
  company: Company!
}

type Address {
  id: Int!
  streetName: String
  number: String
  city: String
  zipCode: String
  company: Company!
}

type CompanyRequest {
  id: Int!
  companyName: String!
  summary: String
  established: Timestamp
  openingHours: String
  comment: String
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
  streetName: String!
  houseNumber: String!
  city: String!
  zipCode: String!
  labels: [CompanyLabel!]!
  companyTypes: [CompanyType!]!
  sectors: [Sector!]!
  categories: [Category!]!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type Label {
  id: Int!
  name: String!
  companies: [CompanyLabel!]!
}

type CompanyLabel {
  id: Int!
  companyId: Int
  company: Company
  companyRequestId: Int
  companyRequest: CompanyRequest
  labelId: Int!
  label: Label!
  motivation: String!
  approved: Boolean!
}

type Company {
  id: Int!
  name: String!
  summary: String
  established: Timestamp
  openingHours: String
  contactPersonId: Int!
  contactPerson: ContactPerson!
  addressId: Int!
  address: Address!
  labels: [CompanyLabel!]!
  companyTypes: [CompanyType!]!
  sectors: [Sector!]!
  categories: [Category!]!
  points: [Point!]!
  rewards: [Reward!]!
  reviews: [Review!]!
}

type Review {
  id: Int!
  content: String!
  rating: Float!
  user: User!
  company: Company!
}

type User {
  id: Int!
  userName: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  role: String!
  company: Company!
  points: [Point!]!
  reviews: [Review!]!
}

type Query {
  users: [User!]!
  user(id: Int!): User!
  userByMail(email: String!): User!
  userByUserName(userName: String!): User!
  addresses: [Address!]!
  address(id: Int!): Address!
  categories: [Category!]!
  category(id: Int!): Category!
  sectors: [Sector!]!
  sector(id: Int!): Sector!
  companies: [Company!]!
  company(id: Int!): Company!
  contactPersons: [ContactPerson!]!
  contactPerson(id: Int!): ContactPerson!
  companyTypes: [CompanyType!]!
  companyType(id: Int!): CompanyType!
  companyRequests: [CompanyRequest!]!
  companyRequest(id: Int!): CompanyRequest!
  companyLabels: [CompanyLabel!]!
  companyLabel(id: Int!): CompanyLabel!
  labels: [Label!]!
  label(id: Int!): Label!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(id: Int!, updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): User!
  createAddress(createAddressInput: CreateAddressInput!): Address!
  updateAddress(id: Int!, updateAddressInput: UpdateAddressInput!): Address!
  removeAddress(id: Int!): Address!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  updateCategory(id: Int!, updateCategoryInput: UpdateCategoryInput!): Category!
  removeCategory(id: Int!): Category!
  createSector(createSectorInput: CreateSectorInput!): Sector!
  updateSector(id: Int!, updateSectorInput: UpdateSectorInput!): Sector!
  removeSector(id: Int!): Sector!
  createCompany(createCompanyInput: CreateCompanyInput!): Company!
  updateCompany(id: Int!, updateCompanyInput: UpdateCompanyInput!): Company!
  removeCompany(id: Int!): Company!
  createContactPerson(createContactPersonInput: CreateContactPersonInput!): ContactPerson!
  updateContactPerson(id: Int!, updateContactPersonInput: UpdateContactPersonInput!): ContactPerson!
  removeContactPerson(id: Int!): ContactPerson!
  createCompanyType(createCompanyTypeInput: CreateCompanyTypeInput!): CompanyType!
  updateCompanyType(id: Int!, updateCompanyTypeInput: UpdateCompanyTypeInput!): CompanyType!
  removeCompanyType(id: Int!): CompanyType!
  createCompanyRequest(createCompanyRequestInput: CreateCompanyRequestInput!): CompanyRequest!
  updateCompanyRequest(id: Int!, updateCompanyRequestInput: UpdateCompanyRequestInput!): CompanyRequest!
  approveCompanyRequest(id: Int!): Company!
  removeCompanyRequest(id: Int!): CompanyRequest!
  createCompanyLabel(createCompanyLabelInput: CreateCompanyLabelInput!): CompanyLabel!
  updateCompanyLabel(id: Int!, updateCompanyLabelInput: UpdateCompanyLabelInput!): CompanyLabel!
  approveCompanyLabel(id: Int!): CompanyLabel!
  removeCompanyLabel(id: Int!): CompanyLabel!
  createLabel(createLabelInput: CreateLabelInput!): Label!
  updateLabel(id: Int!, updateLabelInput: UpdateLabelInput!): Label!
  removeLabel(id: Int!): Label!
}

input CreateUserInput {
  userName: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  role: String!
  companyId: Int
}

input UpdateUserInput {
  userName: String
  firstName: String
  lastName: String
  email: String
  password: String
  role: String
  companyId: Int
}

input CreateAddressInput {
  streetName: String!
  number: String!
  city: String!
  zipCode: String!
}

input UpdateAddressInput {
  streetName: String
  number: String
  city: String
  zipCode: String
}

input CreateCategoryInput {
  name: String!
  sectorId: Int!
}

input UpdateCategoryInput {
  name: String
  sectorId: Int
  sectorIdN: Float
}

input CreateSectorInput {
  name: String!
}

input UpdateSectorInput {
  name: String!
}

input CreateCompanyInput {
  name: String!
  summary: String
  established: Timestamp
  openingHours: String
  contactPersonId: Int!
  addressId: Int!
  labelIds: Int
  companyTypeIds: Int
  sectorIds: Int
  categoryIds: Int
}

input UpdateCompanyInput {
  name: String
  summary: String
  established: Timestamp
  openingHours: String
  contactPersonId: Int
  addressId: Int
  labelIds: Int
  companyTypeIds: Int
  sectorIds: Int
  categoryIds: Int
}

input CreateContactPersonInput {
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
}

input UpdateContactPersonInput {
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
}

input CreateCompanyTypeInput {
  name: String!
}

input UpdateCompanyTypeInput {
  name: String!
}

input CreateCompanyRequestInput {
  companyName: String!
  summary: String
  established: Timestamp
  openingHours: String
  comment: String
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
  streetName: String!
  houseNumber: String!
  city: String!
  zipCode: String!
  labels: [AddCompanyLabelInput!]
  companyTypeIds: [Int!]
  sectorIds: [Int!]
  categoryIds: [Int!]
}

input AddCompanyLabelInput {
  labelId: Int!
  motivation: String!
}

input UpdateCompanyRequestInput {
  companyName: String
  summary: String
  established: Timestamp
  openingHours: String
  comment: String
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
  streetName: String
  houseNumber: String
  city: String
  zipCode: String
  labels: [AddCompanyLabelInput!]
  companyTypeIds: [Int!]
  sectorIds: [Int!]
  categoryIds: [Int!]
}

input CreateCompanyLabelInput {
  companyId: Int
  companyRequestId: Int
  labelId: Int!
  motivation: String!
}

input UpdateCompanyLabelInput {
  companyId: Int
  companyRequestId: Int
  labelId: Int
  motivation: String
  approved: Boolean
}

input CreateLabelInput {
  name: String!
}

input UpdateLabelInput {
  name: String!
}