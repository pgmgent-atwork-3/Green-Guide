# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Sector {
  id: Int!
  name: String!
  categories: [Category!]
}

type Category {
  id: Int!
  name: String!
  sector: Sector!
}

type ContactPerson {
  id: Int!
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
}

type CompanyType {
  id: Int!
  name: String!
}

type Reward {
  id: Int!
  name: String!
  description: String!
  points: Float!
  company: Company!
}

type Point {
  id: Int!
  amount: Float!
  user: User!
  company: Company!
}

type Address {
  id: Int!
  streetName: String!
  Number: String!
  city: String!
  zipCode: String!
}

type CompanyRequest {
  id: Int!
  btwNumber: Int!
  companyName: String!
  firstName: String!
  lastName: String!
  email: String!
  tel: Float!
  customerCard: Boolean!
  comment: String!
  localProduct: String
  fairtrade: String
  biological: String
  secondHand: String
  socialEmployment: String
  civilCooperative: String
  fairSalary: String
  inclusion: String
  durableTransport: String
  accessibility: String
  renewableEnergy: String
  ethicalBanking: String
  recycling: String
  garbageSorting: String
  wasteFree: String
  reusingWater: String
}

type Company {
  id: Int!
  btwNumber: Int!
  name: String!
  summary: String!
  established: Timestamp!
  openingHours: String!
  points: [Point!]
  rewards: [Reward!]
  reviews: [Review!]
  companyTypes: [CompanyType!]
  contactPerson: ContactPerson!
  address: Address!
  sectors: [Sector!]!
  categories: [Category!]!
  companyRequest: CompanyRequest!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type Review {
  id: Int!
  content: String!
  rating: Float!
  user: User!
  company: Company!
}

type User {
  id: Int!
  userName: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  role: String!
  company: Company
  points: [Point!]
  reviews: [Review!]
}

type Query {
  users: [User!]!
  user(id: Int!): User!
  userByMail(email: String!): User!
  userByUserName(userName: String!): User!
  address(id: Int!): Address!
  category(id: Int!): Category!
  company(id: Int!): Company!
  companyRequest(id: Int!): CompanyRequest!
  companyType(id: Int!): CompanyType!
  contactPerson(id: Int!): ContactPerson!
  review(id: Int!): Review!
  sectors: [Sector!]!
  sector(id: Int!): Sector!
  point(id: Int!): Point!
  reward(id: Int!): Reward!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(id: Int!, updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): User!
  createAddress(createAddressInput: CreateAddressInput!): Address!
  updateAddress(updateAddressInput: UpdateAddressInput!): Address!
  removeAddress(id: Int!): Address!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  removeCategory(id: Int!): Category!
  createCompany(createCompanyInput: CreateCompanyInput!): Company!
  updateCompany(updateCompanyInput: UpdateCompanyInput!): Company!
  removeCompany(id: Int!): Company!
  createCompanyRequest(createCompanyRequestInput: CreateCompanyRequestInput!): CompanyRequest!
  updateCompanyRequest(updateCompanyRequestInput: UpdateCompanyRequestInput!): CompanyRequest!
  removeCompanyRequest(id: Int!): CompanyRequest!
  createCompanyType(createCompanyTypeInput: CreateCompanyTypeInput!): CompanyType!
  updateCompanyType(updateCompanyTypeInput: UpdateCompanyTypeInput!): CompanyType!
  removeCompanyType(id: Int!): CompanyType!
  createContactPerson(createContactPersonInput: CreateContactPersonInput!): ContactPerson!
  updateContactPerson(updateContactPersonInput: UpdateContactPersonInput!): ContactPerson!
  removeContactPerson(id: Int!): ContactPerson!
  createReview(createReviewInput: CreateReviewInput!): Review!
  updateReview(updateReviewInput: UpdateReviewInput!): Review!
  removeReview(id: Int!): Review!
  createSector(createSectorInput: CreateSectorInput!): Sector!
  updateSector(id: Int!, updateSectorInput: UpdateSectorInput!): Sector!
  removeSector(id: Int!): Sector!
  createPoint(createPointInput: CreatePointInput!): Point!
  updatePoint(updatePointInput: UpdatePointInput!): Point!
  removePoint(id: Int!): Point!
  createReward(createRewardInput: CreateRewardInput!): Reward!
  updateReward(updateRewardInput: UpdateRewardInput!): Reward!
  removeReward(id: Int!): Reward!
}

input CreateUserInput {
  userName: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  role: String!
  companyId: Int
}

input UpdateUserInput {
  userName: String
  firstName: String
  lastName: String
  email: String
  password: String
  role: String
  companyId: Int
}

input CreateAddressInput {
  streetName: String!
  Number: String!
  city: String!
  zipCode: String!
}

input UpdateAddressInput {
  streetName: String
  Number: String
  city: String
  zipCode: String
  id: Int!
}

input CreateCategoryInput {
  name: String!
  sectorId: Float!
}

input UpdateCategoryInput {
  name: String
  sectorId: Float
  id: Int!
}

input CreateCompanyInput {
  name: String!
  summary: String!
  established: Timestamp!
  openingHours: String!
  btwNumber: Float!
  pointIds: Int
  rewardIds: Int
  reviewIds: Int
  companyTypeIds: Int
  contactPersonId: Int!
  addressId: Int!
  sectorIds: Int!
  categoryIds: Int!
  companyRequestId: Int!
}

input UpdateCompanyInput {
  name: String
  summary: String
  established: Timestamp
  openingHours: String
  btwNumber: Float
  pointIds: Int
  rewardIds: Int
  reviewIds: Int
  companyTypeIds: Int
  contactPersonId: Int
  addressId: Int
  sectorIds: Int
  categoryIds: Int
  companyRequestId: Int
  id: Int!
}

input CreateCompanyRequestInput {
  btwNumber: Float!
  companyName: String!
  firstName: String!
  lastName: String!
  email: String!
  tel: Float!
  customerCard: Boolean!
  comment: String!
  localProduct: String
  fairtrade: String
  biological: String
  secondHand: String
  socialEmployment: String
  civilCooperative: String
  fairSalary: String
  inclusion: String
  durableTransport: String
  accessibliity: String
  renewableEnergy: String
  ethicalBanking: String
  recycling: String
  garbageSorting: String
  wasteFree: String
  reusingWater: String
}

input UpdateCompanyRequestInput {
  btwNumber: Float
  companyName: String
  firstName: String
  lastName: String
  email: String
  tel: Float
  customerCard: Boolean
  comment: String
  localProduct: String
  fairtrade: String
  biological: String
  secondHand: String
  socialEmployment: String
  civilCooperative: String
  fairSalary: String
  inclusion: String
  durableTransport: String
  accessibliity: String
  renewableEnergy: String
  ethicalBanking: String
  recycling: String
  garbageSorting: String
  wasteFree: String
  reusingWater: String
  id: Int!
}

input CreateCompanyTypeInput {
  name: String!
  description: String!
}

input UpdateCompanyTypeInput {
  name: String
  description: String
  id: Int!
}

input CreateContactPersonInput {
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
}

input UpdateContactPersonInput {
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
  id: Int!
}

input CreateReviewInput {
  content: String!
  rating: Float!
  userId: Int!
  companyId: Int!
}

input UpdateReviewInput {
  content: String
  rating: Float
  userId: Int
  companyId: Int
  id: Int!
}

input CreateSectorInput {
  name: String!
  categorieIds: [Int!]
}

input UpdateSectorInput {
  name: String
  categorieIds: [Int!]
}

input CreatePointInput {
  amount: Float!
  userId: Int!
  companyId: Int!
}

input UpdatePointInput {
  amount: Float
  userId: Int
  companyId: Int
  id: Int!
}

input CreateRewardInput {
  name: String!
  description: String!
  points: Int!
  companyId: Int!
}

input UpdateRewardInput {
  name: String
  description: String
  points: Int
  companyId: Int
  id: Int!
}